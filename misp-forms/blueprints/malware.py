import os
import base64
import hashlib
from datetime import datetime
from flask import Blueprint, render_template, request, redirect, url_for, flash
from pymisp import PyMISP, MISPEvent, MISPAttribute
from werkzeug.utils import secure_filename
from misp_connect import get_api_key_for_org, get_available_organisations  # Import from misp_connect

malware_bp = Blueprint('malware', __name__, template_folder='../templates')

@malware_bp.route('/malware', methods=['GET', 'POST'])
def malware():
    available_organisations = get_available_organisations()

    if request.method == 'POST':
        try:
            selected_org = request.form.get('organisation')
            MISP_API_KEY = get_api_key_for_org(selected_org)

            if not MISP_API_KEY:
                flash("Invalid organisation selected. Please try again.", "danger")
                return redirect(url_for('malware.malware'))

            MISP_URL = os.getenv('MISP_URL')
            MISP_VERIFY_SSL = os.getenv('MISP_VERIFY_SSL', 'False').lower() == 'true'
            misp = PyMISP(MISP_URL, MISP_API_KEY, MISP_VERIFY_SSL)

            # Collect form data
            malware_name = request.form.get('malware_name')
            malware_type = request.form.get('malware_type')
            description = request.form.get('description')
            affected_systems = request.form.get('affected_systems')
            infection_vector = request.form.get('infection_vector')
            remediation_steps = request.form.get('remediation_steps')
            payload_installation = request.form.get('payload_installation')
            date = request.form.get('date', datetime.today().strftime('%Y-%m-%d'))
            time = request.form.get('time')
            malware_file = request.files.get('malware_file')
            threat_actor = request.form.get('threat_actor')
            vulnerability = request.form.get('vulnerability')

            distribution = int(request.form.get('distribution', 0))
            threat_level_id = int(request.form.get('threat_level_id', 4))
            analysis = int(request.form.get('analysis', 2))
            tlp = request.form.get('tlp')

            if not malware_name or not malware_type:
                flash('Malware name and type are required fields.', 'danger')
                return redirect(url_for('malware.malware'))

            # Create MISP event
            misp_event = MISPEvent()
            misp_event.info = f"Malware Infection Report - {malware_name}"
            misp_event.date = date
            misp_event.distribution = distribution
            misp_event.threat_level_id = threat_level_id
            misp_event.analysis = analysis
            misp_event.add_tag('rsit:malicious-code="malware-distribution"')
            misp_event.add_tag('circl:incident-classification="malware"')
            misp_event.add_tag('rsit:intrusions="system-compromise"')
            misp_event.add_tag('rsit:malicious-code="infected-system"')
            misp_event.add_tag('source:UnderServed')
            misp_event.add_tag('source:MISP-Forms')

            if tlp:
                misp_event.add_tag(tlp)

            event = misp.add_event(misp_event)
            event_id = event['Event']['id']

            # Add attributes
            add_attribute(misp, event_id, category="Antivirus detection",  type="text", value=malware_name, comment="Malware Name")
            add_attribute(misp, event_id, category="Antivirus detection",  type="text", value=malware_type, comment="Malware Type")

            if description:
                add_attribute(misp, event_id, category="Other",  type="text", value=description, comment="Malware Description")
            if affected_systems:
                add_attribute(misp, event_id, category="Payload delivery",  type="text", value=affected_systems, comment="Affected Systems")
            if infection_vector:
                add_attribute(misp, event_id, category="Payload delivery",  type="text", value=infection_vector, comment="Infection Vector")
            if remediation_steps:
                add_attribute(misp, event_id, category="Other",  type="text", value=remediation_steps, comment="Remediation Steps")
            if payload_installation:
                add_attribute(misp, event_id, category="Payload installation",  type="text", value=payload_installation, comment="Payload Installation Method")
            if time:
                add_attribute(misp, event_id, category="Other",  type="datetime", value=f"{date} {time}", comment="Date and Time of Attack")
            if vulnerability:
                add_attribute(misp, event_id, category="External analysis", type="vulnerability", value=vulnerability)
            if threat_actor:
                add_attribute(misp, event_id, category="Attribution", type="threat-actor", value=threat_actor)

            # malware file upload
            if malware_file and allowed_malware_file(malware_file.filename):
                process_uploaded_malware(misp, event_id, malware_file)

            flash(
                'âœ… Report submitted successfully - Thank you! <br><br> Need advice on <strong>Recovery</strong> or <strong>Mitigation?</strong> <a href="https://mkdocs.underserved.org/malware/" target="_blank">[Click Here]</a>',
                'light')
            return redirect(url_for('malware.malware'))

        except Exception as e:
            flash(f"An error occurred: {e}", "danger")
            return redirect(url_for('malware.malware'))

    return render_template('malware.html', available_organisations=available_organisations, today_date=datetime.today().strftime('%Y-%m-%d'))


def add_attribute(misp, event_id, category,  type, value, data=None, comment=None):
    attribute = MISPAttribute()
    attribute.category = category
    attribute.type =  type
    attribute.value = value
    if data:
        attribute.data = data  # Attach malware file data
    if comment:
        attribute.comment = comment
    response = misp.add_attribute(event_id, attribute)
    return response


def process_uploaded_malware(misp, event_id, file):
    filename = secure_filename(file.filename)
    file_content = file.read()

    md5_hash = hashlib.md5(file_content).hexdigest()
    sha256_hash = hashlib.sha256(file_content).hexdigest()
    sha512_hash = hashlib.sha512(file_content).hexdigest()
    encoded_data = base64.b64encode(file_content).decode('utf-8')

    add_attribute(misp, event_id, category="Payload delivery",  type="filename", value=filename, comment="Malware Filename")
    add_attribute(misp, event_id, category="Payload delivery",  type="md5", value=md5_hash, comment="MD5 Hash of Malware")
    add_attribute(misp, event_id, category="Payload delivery",  type="sha256", value=sha256_hash, comment="SHA256 Hash of Malware")
    add_attribute(misp, event_id, category="Payload delivery",  type="sha512", value=sha512_hash, comment="SHA512 Hash of Malware")

    add_attribute(misp, event_id, category="Payload delivery",  type="malware-sample", value=filename, data=encoded_data, comment="Malware File Uploaded")


def allowed_malware_file(filename):
    allowed_extensions = {'exe', 'dll', 'bin', 'jar', 'ps1', 'vbs', 'js', 'pdf'}
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions
